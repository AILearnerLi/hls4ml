-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_0_V : IN STD_LOGIC_VECTOR (17 downto 0);
    data_1_V : IN STD_LOGIC_VECTOR (17 downto 0);
    data_2_V : IN STD_LOGIC_VECTOR (17 downto 0);
    data_3_V : IN STD_LOGIC_VECTOR (17 downto 0);
    data_4_V : IN STD_LOGIC_VECTOR (17 downto 0);
    data_5_V : IN STD_LOGIC_VECTOR (17 downto 0);
    data_6_V : IN STD_LOGIC_VECTOR (17 downto 0);
    data_7_V : IN STD_LOGIC_VECTOR (17 downto 0);
    data_8_V : IN STD_LOGIC_VECTOR (17 downto 0);
    data_9_V : IN STD_LOGIC_VECTOR (17 downto 0);
    res_0_V : OUT STD_LOGIC_VECTOR (17 downto 0);
    res_0_V_ap_vld : OUT STD_LOGIC;
    const_size_in : OUT STD_LOGIC_VECTOR (15 downto 0);
    const_size_in_ap_vld : OUT STD_LOGIC;
    const_size_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    const_size_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7vx690tffg1927-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.330000,HLS_SYN_LAT=14,HLS_SYN_TPT=2,HLS_SYN_MEM=1,HLS_SYN_DSP=94,HLS_SYN_FF=4969,HLS_SYN_LUT=5467}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv16_A : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001010";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal logits1_0_V_reg_529 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_1_V_reg_534 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_2_V_reg_539 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_3_V_reg_544 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_4_V_reg_549 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_5_V_reg_554 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_6_V_reg_559 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_7_V_reg_564 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_8_V_reg_569 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_9_V_reg_574 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_10_V_reg_579 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_11_V_reg_584 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_12_V_reg_589 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_13_V_reg_594 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_14_V_reg_599 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_15_V_reg_604 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_16_V_reg_609 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_17_V_reg_614 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_18_V_reg_619 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_19_V_reg_624 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_20_V_reg_629 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_21_V_reg_634 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_22_V_reg_639 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_23_V_reg_644 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_24_V_reg_649 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_25_V_reg_654 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_26_V_reg_659 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_27_V_reg_664 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_28_V_reg_669 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_29_V_reg_674 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_30_V_reg_679 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_31_V_reg_684 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_0_V_reg_689 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_1_V_reg_694 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_2_V_reg_699 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_3_V_reg_704 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_4_V_reg_709 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_5_V_reg_714 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_6_V_reg_719 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_7_V_reg_724 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_8_V_reg_729 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_9_V_reg_734 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_10_V_reg_739 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_11_V_reg_744 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_12_V_reg_749 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_13_V_reg_754 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_14_V_reg_759 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_15_V_reg_764 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_16_V_reg_769 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_17_V_reg_774 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_18_V_reg_779 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_19_V_reg_784 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_20_V_reg_789 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_21_V_reg_794 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_22_V_reg_799 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_23_V_reg_804 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_24_V_reg_809 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_25_V_reg_814 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_26_V_reg_819 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_27_V_reg_824 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_28_V_reg_829 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_29_V_reg_834 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_30_V_reg_839 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_31_V_reg_844 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_fu_169_ap_return : STD_LOGIC_VECTOR (17 downto 0);
    signal logits2_0_V_reg_849 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_enable_reg_pp0_iter0_preg : STD_LOGIC := '0';
    signal grp_compute_layer_0_0_0_s_fu_145_ap_start : STD_LOGIC;
    signal grp_compute_layer_0_0_0_s_fu_145_ap_done : STD_LOGIC;
    signal grp_compute_layer_0_0_0_s_fu_145_ap_idle : STD_LOGIC;
    signal grp_compute_layer_0_0_0_s_fu_145_ap_ready : STD_LOGIC;
    signal grp_compute_layer_0_0_0_s_fu_145_ap_return_0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_145_ap_return_1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_145_ap_return_2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_145_ap_return_3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_145_ap_return_4 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_145_ap_return_5 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_145_ap_return_6 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_145_ap_return_7 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_145_ap_return_8 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_145_ap_return_9 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_145_ap_return_10 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_145_ap_return_11 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_145_ap_return_12 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_145_ap_return_13 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_145_ap_return_14 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_145_ap_return_15 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_145_ap_return_16 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_145_ap_return_17 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_145_ap_return_18 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_145_ap_return_19 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_145_ap_return_20 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_145_ap_return_21 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_145_ap_return_22 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_145_ap_return_23 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_145_ap_return_24 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_145_ap_return_25 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_145_ap_return_26 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_145_ap_return_27 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_145_ap_return_28 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_145_ap_return_29 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_145_ap_return_30 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_145_ap_return_31 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_fu_169_ap_start : STD_LOGIC;
    signal grp_compute_layer_0_0_fu_169_ap_done : STD_LOGIC;
    signal grp_compute_layer_0_0_fu_169_ap_idle : STD_LOGIC;
    signal grp_compute_layer_0_0_fu_169_ap_ready : STD_LOGIC;
    signal call_ret2_relu_fu_205_ap_return_0 : STD_LOGIC_VECTOR (17 downto 0);
    signal call_ret2_relu_fu_205_ap_return_1 : STD_LOGIC_VECTOR (17 downto 0);
    signal call_ret2_relu_fu_205_ap_return_2 : STD_LOGIC_VECTOR (17 downto 0);
    signal call_ret2_relu_fu_205_ap_return_3 : STD_LOGIC_VECTOR (17 downto 0);
    signal call_ret2_relu_fu_205_ap_return_4 : STD_LOGIC_VECTOR (17 downto 0);
    signal call_ret2_relu_fu_205_ap_return_5 : STD_LOGIC_VECTOR (17 downto 0);
    signal call_ret2_relu_fu_205_ap_return_6 : STD_LOGIC_VECTOR (17 downto 0);
    signal call_ret2_relu_fu_205_ap_return_7 : STD_LOGIC_VECTOR (17 downto 0);
    signal call_ret2_relu_fu_205_ap_return_8 : STD_LOGIC_VECTOR (17 downto 0);
    signal call_ret2_relu_fu_205_ap_return_9 : STD_LOGIC_VECTOR (17 downto 0);
    signal call_ret2_relu_fu_205_ap_return_10 : STD_LOGIC_VECTOR (17 downto 0);
    signal call_ret2_relu_fu_205_ap_return_11 : STD_LOGIC_VECTOR (17 downto 0);
    signal call_ret2_relu_fu_205_ap_return_12 : STD_LOGIC_VECTOR (17 downto 0);
    signal call_ret2_relu_fu_205_ap_return_13 : STD_LOGIC_VECTOR (17 downto 0);
    signal call_ret2_relu_fu_205_ap_return_14 : STD_LOGIC_VECTOR (17 downto 0);
    signal call_ret2_relu_fu_205_ap_return_15 : STD_LOGIC_VECTOR (17 downto 0);
    signal call_ret2_relu_fu_205_ap_return_16 : STD_LOGIC_VECTOR (17 downto 0);
    signal call_ret2_relu_fu_205_ap_return_17 : STD_LOGIC_VECTOR (17 downto 0);
    signal call_ret2_relu_fu_205_ap_return_18 : STD_LOGIC_VECTOR (17 downto 0);
    signal call_ret2_relu_fu_205_ap_return_19 : STD_LOGIC_VECTOR (17 downto 0);
    signal call_ret2_relu_fu_205_ap_return_20 : STD_LOGIC_VECTOR (17 downto 0);
    signal call_ret2_relu_fu_205_ap_return_21 : STD_LOGIC_VECTOR (17 downto 0);
    signal call_ret2_relu_fu_205_ap_return_22 : STD_LOGIC_VECTOR (17 downto 0);
    signal call_ret2_relu_fu_205_ap_return_23 : STD_LOGIC_VECTOR (17 downto 0);
    signal call_ret2_relu_fu_205_ap_return_24 : STD_LOGIC_VECTOR (17 downto 0);
    signal call_ret2_relu_fu_205_ap_return_25 : STD_LOGIC_VECTOR (17 downto 0);
    signal call_ret2_relu_fu_205_ap_return_26 : STD_LOGIC_VECTOR (17 downto 0);
    signal call_ret2_relu_fu_205_ap_return_27 : STD_LOGIC_VECTOR (17 downto 0);
    signal call_ret2_relu_fu_205_ap_return_28 : STD_LOGIC_VECTOR (17 downto 0);
    signal call_ret2_relu_fu_205_ap_return_29 : STD_LOGIC_VECTOR (17 downto 0);
    signal call_ret2_relu_fu_205_ap_return_30 : STD_LOGIC_VECTOR (17 downto 0);
    signal call_ret2_relu_fu_205_ap_return_31 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_sigmoid_fu_241_ap_start : STD_LOGIC;
    signal grp_sigmoid_fu_241_ap_done : STD_LOGIC;
    signal grp_sigmoid_fu_241_ap_idle : STD_LOGIC;
    signal grp_sigmoid_fu_241_ap_ready : STD_LOGIC;
    signal grp_sigmoid_fu_241_ap_return : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_grp_compute_layer_0_0_0_s_fu_145_ap_start : STD_LOGIC;
    signal ap_reg_grp_compute_layer_0_0_fu_169_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_sigmoid_fu_241_ap_start : STD_LOGIC := '0';
    signal ap_pipeline_idle_pp0 : STD_LOGIC;

    component compute_layer_0_0_0_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_25 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_26 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_27 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_28 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_29 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_30 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_31 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component compute_layer_0_0 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_10_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_11_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_12_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_13_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_14_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_15_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_16_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_17_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_18_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_19_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_20_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_21_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_22_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_23_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_24_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_25_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_26_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_27_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_28_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_29_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_30_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_31_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component relu IS
    port (
        data_0_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_10_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_11_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_12_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_13_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_14_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_15_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_16_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_17_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_18_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_19_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_20_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_21_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_22_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_23_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_24_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_25_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_26_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_27_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_28_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_29_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_30_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_31_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_25 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_26 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_27 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_28 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_29 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_30 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_31 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component sigmoid IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    grp_compute_layer_0_0_0_s_fu_145 : component compute_layer_0_0_0_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_compute_layer_0_0_0_s_fu_145_ap_start,
        ap_done => grp_compute_layer_0_0_0_s_fu_145_ap_done,
        ap_idle => grp_compute_layer_0_0_0_s_fu_145_ap_idle,
        ap_ready => grp_compute_layer_0_0_0_s_fu_145_ap_ready,
        data_0_V_read => data_0_V,
        data_1_V_read => data_1_V,
        data_2_V_read => data_2_V,
        data_3_V_read => data_3_V,
        data_4_V_read => data_4_V,
        data_5_V_read => data_5_V,
        data_6_V_read => data_6_V,
        data_7_V_read => data_7_V,
        data_8_V_read => data_8_V,
        data_9_V_read => data_9_V,
        ap_return_0 => grp_compute_layer_0_0_0_s_fu_145_ap_return_0,
        ap_return_1 => grp_compute_layer_0_0_0_s_fu_145_ap_return_1,
        ap_return_2 => grp_compute_layer_0_0_0_s_fu_145_ap_return_2,
        ap_return_3 => grp_compute_layer_0_0_0_s_fu_145_ap_return_3,
        ap_return_4 => grp_compute_layer_0_0_0_s_fu_145_ap_return_4,
        ap_return_5 => grp_compute_layer_0_0_0_s_fu_145_ap_return_5,
        ap_return_6 => grp_compute_layer_0_0_0_s_fu_145_ap_return_6,
        ap_return_7 => grp_compute_layer_0_0_0_s_fu_145_ap_return_7,
        ap_return_8 => grp_compute_layer_0_0_0_s_fu_145_ap_return_8,
        ap_return_9 => grp_compute_layer_0_0_0_s_fu_145_ap_return_9,
        ap_return_10 => grp_compute_layer_0_0_0_s_fu_145_ap_return_10,
        ap_return_11 => grp_compute_layer_0_0_0_s_fu_145_ap_return_11,
        ap_return_12 => grp_compute_layer_0_0_0_s_fu_145_ap_return_12,
        ap_return_13 => grp_compute_layer_0_0_0_s_fu_145_ap_return_13,
        ap_return_14 => grp_compute_layer_0_0_0_s_fu_145_ap_return_14,
        ap_return_15 => grp_compute_layer_0_0_0_s_fu_145_ap_return_15,
        ap_return_16 => grp_compute_layer_0_0_0_s_fu_145_ap_return_16,
        ap_return_17 => grp_compute_layer_0_0_0_s_fu_145_ap_return_17,
        ap_return_18 => grp_compute_layer_0_0_0_s_fu_145_ap_return_18,
        ap_return_19 => grp_compute_layer_0_0_0_s_fu_145_ap_return_19,
        ap_return_20 => grp_compute_layer_0_0_0_s_fu_145_ap_return_20,
        ap_return_21 => grp_compute_layer_0_0_0_s_fu_145_ap_return_21,
        ap_return_22 => grp_compute_layer_0_0_0_s_fu_145_ap_return_22,
        ap_return_23 => grp_compute_layer_0_0_0_s_fu_145_ap_return_23,
        ap_return_24 => grp_compute_layer_0_0_0_s_fu_145_ap_return_24,
        ap_return_25 => grp_compute_layer_0_0_0_s_fu_145_ap_return_25,
        ap_return_26 => grp_compute_layer_0_0_0_s_fu_145_ap_return_26,
        ap_return_27 => grp_compute_layer_0_0_0_s_fu_145_ap_return_27,
        ap_return_28 => grp_compute_layer_0_0_0_s_fu_145_ap_return_28,
        ap_return_29 => grp_compute_layer_0_0_0_s_fu_145_ap_return_29,
        ap_return_30 => grp_compute_layer_0_0_0_s_fu_145_ap_return_30,
        ap_return_31 => grp_compute_layer_0_0_0_s_fu_145_ap_return_31);

    grp_compute_layer_0_0_fu_169 : component compute_layer_0_0
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_compute_layer_0_0_fu_169_ap_start,
        ap_done => grp_compute_layer_0_0_fu_169_ap_done,
        ap_idle => grp_compute_layer_0_0_fu_169_ap_idle,
        ap_ready => grp_compute_layer_0_0_fu_169_ap_ready,
        data_0_V_read => layer1_out_0_V_reg_689,
        data_1_V_read => layer1_out_1_V_reg_694,
        data_2_V_read => layer1_out_2_V_reg_699,
        data_3_V_read => layer1_out_3_V_reg_704,
        data_4_V_read => layer1_out_4_V_reg_709,
        data_5_V_read => layer1_out_5_V_reg_714,
        data_6_V_read => layer1_out_6_V_reg_719,
        data_7_V_read => layer1_out_7_V_reg_724,
        data_8_V_read => layer1_out_8_V_reg_729,
        data_9_V_read => layer1_out_9_V_reg_734,
        data_10_V_read => layer1_out_10_V_reg_739,
        data_11_V_read => layer1_out_11_V_reg_744,
        data_12_V_read => layer1_out_12_V_reg_749,
        data_13_V_read => layer1_out_13_V_reg_754,
        data_14_V_read => layer1_out_14_V_reg_759,
        data_15_V_read => layer1_out_15_V_reg_764,
        data_16_V_read => layer1_out_16_V_reg_769,
        data_17_V_read => layer1_out_17_V_reg_774,
        data_18_V_read => layer1_out_18_V_reg_779,
        data_19_V_read => layer1_out_19_V_reg_784,
        data_20_V_read => layer1_out_20_V_reg_789,
        data_21_V_read => layer1_out_21_V_reg_794,
        data_22_V_read => layer1_out_22_V_reg_799,
        data_23_V_read => layer1_out_23_V_reg_804,
        data_24_V_read => layer1_out_24_V_reg_809,
        data_25_V_read => layer1_out_25_V_reg_814,
        data_26_V_read => layer1_out_26_V_reg_819,
        data_27_V_read => layer1_out_27_V_reg_824,
        data_28_V_read => layer1_out_28_V_reg_829,
        data_29_V_read => layer1_out_29_V_reg_834,
        data_30_V_read => layer1_out_30_V_reg_839,
        data_31_V_read => layer1_out_31_V_reg_844,
        ap_return => grp_compute_layer_0_0_fu_169_ap_return);

    call_ret2_relu_fu_205 : component relu
    port map (
        data_0_V_read => logits1_0_V_reg_529,
        data_1_V_read => logits1_1_V_reg_534,
        data_2_V_read => logits1_2_V_reg_539,
        data_3_V_read => logits1_3_V_reg_544,
        data_4_V_read => logits1_4_V_reg_549,
        data_5_V_read => logits1_5_V_reg_554,
        data_6_V_read => logits1_6_V_reg_559,
        data_7_V_read => logits1_7_V_reg_564,
        data_8_V_read => logits1_8_V_reg_569,
        data_9_V_read => logits1_9_V_reg_574,
        data_10_V_read => logits1_10_V_reg_579,
        data_11_V_read => logits1_11_V_reg_584,
        data_12_V_read => logits1_12_V_reg_589,
        data_13_V_read => logits1_13_V_reg_594,
        data_14_V_read => logits1_14_V_reg_599,
        data_15_V_read => logits1_15_V_reg_604,
        data_16_V_read => logits1_16_V_reg_609,
        data_17_V_read => logits1_17_V_reg_614,
        data_18_V_read => logits1_18_V_reg_619,
        data_19_V_read => logits1_19_V_reg_624,
        data_20_V_read => logits1_20_V_reg_629,
        data_21_V_read => logits1_21_V_reg_634,
        data_22_V_read => logits1_22_V_reg_639,
        data_23_V_read => logits1_23_V_reg_644,
        data_24_V_read => logits1_24_V_reg_649,
        data_25_V_read => logits1_25_V_reg_654,
        data_26_V_read => logits1_26_V_reg_659,
        data_27_V_read => logits1_27_V_reg_664,
        data_28_V_read => logits1_28_V_reg_669,
        data_29_V_read => logits1_29_V_reg_674,
        data_30_V_read => logits1_30_V_reg_679,
        data_31_V_read => logits1_31_V_reg_684,
        ap_return_0 => call_ret2_relu_fu_205_ap_return_0,
        ap_return_1 => call_ret2_relu_fu_205_ap_return_1,
        ap_return_2 => call_ret2_relu_fu_205_ap_return_2,
        ap_return_3 => call_ret2_relu_fu_205_ap_return_3,
        ap_return_4 => call_ret2_relu_fu_205_ap_return_4,
        ap_return_5 => call_ret2_relu_fu_205_ap_return_5,
        ap_return_6 => call_ret2_relu_fu_205_ap_return_6,
        ap_return_7 => call_ret2_relu_fu_205_ap_return_7,
        ap_return_8 => call_ret2_relu_fu_205_ap_return_8,
        ap_return_9 => call_ret2_relu_fu_205_ap_return_9,
        ap_return_10 => call_ret2_relu_fu_205_ap_return_10,
        ap_return_11 => call_ret2_relu_fu_205_ap_return_11,
        ap_return_12 => call_ret2_relu_fu_205_ap_return_12,
        ap_return_13 => call_ret2_relu_fu_205_ap_return_13,
        ap_return_14 => call_ret2_relu_fu_205_ap_return_14,
        ap_return_15 => call_ret2_relu_fu_205_ap_return_15,
        ap_return_16 => call_ret2_relu_fu_205_ap_return_16,
        ap_return_17 => call_ret2_relu_fu_205_ap_return_17,
        ap_return_18 => call_ret2_relu_fu_205_ap_return_18,
        ap_return_19 => call_ret2_relu_fu_205_ap_return_19,
        ap_return_20 => call_ret2_relu_fu_205_ap_return_20,
        ap_return_21 => call_ret2_relu_fu_205_ap_return_21,
        ap_return_22 => call_ret2_relu_fu_205_ap_return_22,
        ap_return_23 => call_ret2_relu_fu_205_ap_return_23,
        ap_return_24 => call_ret2_relu_fu_205_ap_return_24,
        ap_return_25 => call_ret2_relu_fu_205_ap_return_25,
        ap_return_26 => call_ret2_relu_fu_205_ap_return_26,
        ap_return_27 => call_ret2_relu_fu_205_ap_return_27,
        ap_return_28 => call_ret2_relu_fu_205_ap_return_28,
        ap_return_29 => call_ret2_relu_fu_205_ap_return_29,
        ap_return_30 => call_ret2_relu_fu_205_ap_return_30,
        ap_return_31 => call_ret2_relu_fu_205_ap_return_31);

    grp_sigmoid_fu_241 : component sigmoid
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sigmoid_fu_241_ap_start,
        ap_done => grp_sigmoid_fu_241_ap_done,
        ap_idle => grp_sigmoid_fu_241_ap_idle,
        ap_ready => grp_sigmoid_fu_241_ap_ready,
        data_V_read => logits2_0_V_reg_849,
        ap_return => grp_sigmoid_fu_241_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_preg <= ap_const_logic_0;
            else
                if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))))) then 
                    ap_enable_reg_pp0_iter0_preg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter6)))) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_compute_layer_0_0_fu_169_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_compute_layer_0_0_fu_169_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
                    ap_reg_grp_compute_layer_0_0_fu_169_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_compute_layer_0_0_fu_169_ap_ready)) then 
                    ap_reg_grp_compute_layer_0_0_fu_169_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_sigmoid_fu_241_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_sigmoid_fu_241_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5))) then 
                    ap_reg_grp_sigmoid_fu_241_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sigmoid_fu_241_ap_ready)) then 
                    ap_reg_grp_sigmoid_fu_241_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1))) then
                layer1_out_0_V_reg_689 <= call_ret2_relu_fu_205_ap_return_0;
                layer1_out_10_V_reg_739 <= call_ret2_relu_fu_205_ap_return_10;
                layer1_out_11_V_reg_744 <= call_ret2_relu_fu_205_ap_return_11;
                layer1_out_12_V_reg_749 <= call_ret2_relu_fu_205_ap_return_12;
                layer1_out_13_V_reg_754 <= call_ret2_relu_fu_205_ap_return_13;
                layer1_out_14_V_reg_759 <= call_ret2_relu_fu_205_ap_return_14;
                layer1_out_15_V_reg_764 <= call_ret2_relu_fu_205_ap_return_15;
                layer1_out_16_V_reg_769 <= call_ret2_relu_fu_205_ap_return_16;
                layer1_out_17_V_reg_774 <= call_ret2_relu_fu_205_ap_return_17;
                layer1_out_18_V_reg_779 <= call_ret2_relu_fu_205_ap_return_18;
                layer1_out_19_V_reg_784 <= call_ret2_relu_fu_205_ap_return_19;
                layer1_out_1_V_reg_694 <= call_ret2_relu_fu_205_ap_return_1;
                layer1_out_20_V_reg_789 <= call_ret2_relu_fu_205_ap_return_20;
                layer1_out_21_V_reg_794 <= call_ret2_relu_fu_205_ap_return_21;
                layer1_out_22_V_reg_799 <= call_ret2_relu_fu_205_ap_return_22;
                layer1_out_23_V_reg_804 <= call_ret2_relu_fu_205_ap_return_23;
                layer1_out_24_V_reg_809 <= call_ret2_relu_fu_205_ap_return_24;
                layer1_out_25_V_reg_814 <= call_ret2_relu_fu_205_ap_return_25;
                layer1_out_26_V_reg_819 <= call_ret2_relu_fu_205_ap_return_26;
                layer1_out_27_V_reg_824 <= call_ret2_relu_fu_205_ap_return_27;
                layer1_out_28_V_reg_829 <= call_ret2_relu_fu_205_ap_return_28;
                layer1_out_29_V_reg_834 <= call_ret2_relu_fu_205_ap_return_29;
                layer1_out_2_V_reg_699 <= call_ret2_relu_fu_205_ap_return_2;
                layer1_out_30_V_reg_839 <= call_ret2_relu_fu_205_ap_return_30;
                layer1_out_31_V_reg_844 <= call_ret2_relu_fu_205_ap_return_31;
                layer1_out_3_V_reg_704 <= call_ret2_relu_fu_205_ap_return_3;
                layer1_out_4_V_reg_709 <= call_ret2_relu_fu_205_ap_return_4;
                layer1_out_5_V_reg_714 <= call_ret2_relu_fu_205_ap_return_5;
                layer1_out_6_V_reg_719 <= call_ret2_relu_fu_205_ap_return_6;
                layer1_out_7_V_reg_724 <= call_ret2_relu_fu_205_ap_return_7;
                layer1_out_8_V_reg_729 <= call_ret2_relu_fu_205_ap_return_8;
                layer1_out_9_V_reg_734 <= call_ret2_relu_fu_205_ap_return_9;
                logits2_0_V_reg_849 <= grp_compute_layer_0_0_fu_169_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))))) then
                logits1_0_V_reg_529 <= grp_compute_layer_0_0_0_s_fu_145_ap_return_0;
                logits1_10_V_reg_579 <= grp_compute_layer_0_0_0_s_fu_145_ap_return_10;
                logits1_11_V_reg_584 <= grp_compute_layer_0_0_0_s_fu_145_ap_return_11;
                logits1_12_V_reg_589 <= grp_compute_layer_0_0_0_s_fu_145_ap_return_12;
                logits1_13_V_reg_594 <= grp_compute_layer_0_0_0_s_fu_145_ap_return_13;
                logits1_14_V_reg_599 <= grp_compute_layer_0_0_0_s_fu_145_ap_return_14;
                logits1_15_V_reg_604 <= grp_compute_layer_0_0_0_s_fu_145_ap_return_15;
                logits1_16_V_reg_609 <= grp_compute_layer_0_0_0_s_fu_145_ap_return_16;
                logits1_17_V_reg_614 <= grp_compute_layer_0_0_0_s_fu_145_ap_return_17;
                logits1_18_V_reg_619 <= grp_compute_layer_0_0_0_s_fu_145_ap_return_18;
                logits1_19_V_reg_624 <= grp_compute_layer_0_0_0_s_fu_145_ap_return_19;
                logits1_1_V_reg_534 <= grp_compute_layer_0_0_0_s_fu_145_ap_return_1;
                logits1_20_V_reg_629 <= grp_compute_layer_0_0_0_s_fu_145_ap_return_20;
                logits1_21_V_reg_634 <= grp_compute_layer_0_0_0_s_fu_145_ap_return_21;
                logits1_22_V_reg_639 <= grp_compute_layer_0_0_0_s_fu_145_ap_return_22;
                logits1_23_V_reg_644 <= grp_compute_layer_0_0_0_s_fu_145_ap_return_23;
                logits1_24_V_reg_649 <= grp_compute_layer_0_0_0_s_fu_145_ap_return_24;
                logits1_25_V_reg_654 <= grp_compute_layer_0_0_0_s_fu_145_ap_return_25;
                logits1_26_V_reg_659 <= grp_compute_layer_0_0_0_s_fu_145_ap_return_26;
                logits1_27_V_reg_664 <= grp_compute_layer_0_0_0_s_fu_145_ap_return_27;
                logits1_28_V_reg_669 <= grp_compute_layer_0_0_0_s_fu_145_ap_return_28;
                logits1_29_V_reg_674 <= grp_compute_layer_0_0_0_s_fu_145_ap_return_29;
                logits1_2_V_reg_539 <= grp_compute_layer_0_0_0_s_fu_145_ap_return_2;
                logits1_30_V_reg_679 <= grp_compute_layer_0_0_0_s_fu_145_ap_return_30;
                logits1_31_V_reg_684 <= grp_compute_layer_0_0_0_s_fu_145_ap_return_31;
                logits1_3_V_reg_544 <= grp_compute_layer_0_0_0_s_fu_145_ap_return_3;
                logits1_4_V_reg_549 <= grp_compute_layer_0_0_0_s_fu_145_ap_return_4;
                logits1_5_V_reg_554 <= grp_compute_layer_0_0_0_s_fu_145_ap_return_5;
                logits1_6_V_reg_559 <= grp_compute_layer_0_0_0_s_fu_145_ap_return_6;
                logits1_7_V_reg_564 <= grp_compute_layer_0_0_0_s_fu_145_ap_return_7;
                logits1_8_V_reg_569 <= grp_compute_layer_0_0_0_s_fu_145_ap_return_8;
                logits1_9_V_reg_574 <= grp_compute_layer_0_0_0_s_fu_145_ap_return_9;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_pipeline_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))) and not((ap_const_logic_1 = ap_pipeline_idle_pp0)) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = ap_enable_reg_pp0_iter7))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_pipeline_idle_pp0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1 downto 1);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter7))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_preg)
    begin
        if ((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_preg;
        end if; 
    end process;


    ap_grp_compute_layer_0_0_0_s_fu_145_ap_start_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_start = ap_const_logic_0)))) then 
            ap_grp_compute_layer_0_0_0_s_fu_145_ap_start <= ap_const_logic_1;
        else 
            ap_grp_compute_layer_0_0_0_s_fu_145_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = ap_enable_reg_pp0_iter7))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_pipeline_idle_pp0_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6))) then 
            ap_pipeline_idle_pp0 <= ap_const_logic_1;
        else 
            ap_pipeline_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    const_size_in <= ap_const_lv16_A;

    const_size_in_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter7))) then 
            const_size_in_ap_vld <= ap_const_logic_1;
        else 
            const_size_in_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    const_size_out <= ap_const_lv16_1;

    const_size_out_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter7))) then 
            const_size_out_ap_vld <= ap_const_logic_1;
        else 
            const_size_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    grp_compute_layer_0_0_0_s_fu_145_ap_start_assign_proc : process(ap_grp_compute_layer_0_0_0_s_fu_145_ap_start)
    begin
        if ((ap_const_logic_1 = ap_grp_compute_layer_0_0_0_s_fu_145_ap_start)) then 
            grp_compute_layer_0_0_0_s_fu_145_ap_start <= ap_grp_compute_layer_0_0_0_s_fu_145_ap_start;
        else 
            grp_compute_layer_0_0_0_s_fu_145_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_compute_layer_0_0_fu_169_ap_start <= ap_reg_grp_compute_layer_0_0_fu_169_ap_start;
    grp_sigmoid_fu_241_ap_start <= ap_reg_grp_sigmoid_fu_241_ap_start;
    res_0_V <= std_logic_vector(resize(unsigned(grp_sigmoid_fu_241_ap_return),18));

    res_0_V_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter7))) then 
            res_0_V_ap_vld <= ap_const_logic_1;
        else 
            res_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
