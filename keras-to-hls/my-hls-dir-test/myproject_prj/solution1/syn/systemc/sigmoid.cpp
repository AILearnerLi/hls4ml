// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sigmoid.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sigmoid::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sigmoid::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> sigmoid::ap_ST_fsm_pp0_stage0 = "1";
const sc_lv<32> sigmoid::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> sigmoid::ap_const_lv1_1 = "1";
const sc_lv<32> sigmoid::ap_const_lv32_4 = "100";
const sc_lv<32> sigmoid::ap_const_lv32_11 = "10001";
const sc_lv<6> sigmoid::ap_const_lv6_0 = "000000";
const sc_lv<10> sigmoid::ap_const_lv10_0 = "0000000000";
const sc_lv<15> sigmoid::ap_const_lv15_1 = "1";
const sc_lv<15> sigmoid::ap_const_lv15_200 = "1000000000";
const sc_lv<14> sigmoid::ap_const_lv14_200 = "1000000000";
const sc_lv<32> sigmoid::ap_const_lv32_E = "1110";
const sc_lv<14> sigmoid::ap_const_lv14_0 = "00000000000000";
const sc_lv<32> sigmoid::ap_const_lv32_A = "1010";
const sc_lv<32> sigmoid::ap_const_lv32_D = "1101";
const sc_lv<4> sigmoid::ap_const_lv4_0 = "0000";
const sc_lv<10> sigmoid::ap_const_lv10_3FF = "1111111111";

sigmoid::sigmoid(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sigmoid_table3_U = new sigmoid_sigmoid_tncg("sigmoid_table3_U");
    sigmoid_table3_U->clk(ap_clk);
    sigmoid_table3_U->reset(ap_rst);
    sigmoid_table3_U->address0(sigmoid_table3_address0);
    sigmoid_table3_U->ce0(sigmoid_table3_ce0);
    sigmoid_table3_U->q0(sigmoid_table3_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_pipeline_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( sigmoid_table3_q0 );

    SC_METHOD(thread_icmp_fu_186_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_8_reg_208 );

    SC_METHOD(thread_index_1_fu_191_p3);
    sensitive << ( tmp_7_reg_203 );
    sensitive << ( icmp_fu_186_p2 );

    SC_METHOD(thread_index_cast_fu_150_p2);
    sensitive << ( tmp_4_fu_140_p1 );

    SC_METHOD(thread_index_fu_144_p2);
    sensitive << ( p_2_fu_132_p3 );

    SC_METHOD(thread_p_1_fu_164_p3);
    sensitive << ( tmp_6_fu_156_p3 );
    sensitive << ( index_cast_fu_150_p2 );

    SC_METHOD(thread_p_2_fu_132_p3);
    sensitive << ( ret_V_cast_fu_88_p1 );
    sensitive << ( tmp_2_fu_92_p3 );
    sensitive << ( p_s_fu_124_p3 );

    SC_METHOD(thread_p_Result_2_fu_104_p3);
    sensitive << ( tmp_3_fu_100_p1 );

    SC_METHOD(thread_p_s_fu_124_p3);
    sensitive << ( ret_V_cast_fu_88_p1 );
    sensitive << ( tmp_5_fu_112_p2 );
    sensitive << ( ret_V_fu_118_p2 );

    SC_METHOD(thread_ret_V_cast_fu_88_p1);
    sensitive << ( tmp_1_fu_78_p4 );

    SC_METHOD(thread_ret_V_fu_118_p2);
    sensitive << ( ret_V_cast_fu_88_p1 );

    SC_METHOD(thread_sigmoid_table3_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_s_fu_198_p1 );

    SC_METHOD(thread_sigmoid_table3_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_tmp_1_fu_78_p4);
    sensitive << ( data_V_read );

    SC_METHOD(thread_tmp_2_fu_92_p3);
    sensitive << ( data_V_read );

    SC_METHOD(thread_tmp_3_fu_100_p1);
    sensitive << ( data_V_read );

    SC_METHOD(thread_tmp_4_fu_140_p1);
    sensitive << ( p_2_fu_132_p3 );

    SC_METHOD(thread_tmp_5_fu_112_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( p_Result_2_fu_104_p3 );

    SC_METHOD(thread_tmp_6_fu_156_p3);
    sensitive << ( index_fu_144_p2 );

    SC_METHOD(thread_tmp_7_fu_172_p1);
    sensitive << ( p_1_fu_164_p3 );

    SC_METHOD(thread_tmp_s_fu_198_p1);
    sensitive << ( index_1_fu_191_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_pipeline_idle_pp0 );

    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sigmoid_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, data_V_read, "(port)data_V_read");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, sigmoid_table3_address0, "sigmoid_table3_address0");
    sc_trace(mVcdFile, sigmoid_table3_ce0, "sigmoid_table3_ce0");
    sc_trace(mVcdFile, sigmoid_table3_q0, "sigmoid_table3_q0");
    sc_trace(mVcdFile, tmp_7_fu_172_p1, "tmp_7_fu_172_p1");
    sc_trace(mVcdFile, tmp_7_reg_203, "tmp_7_reg_203");
    sc_trace(mVcdFile, tmp_8_reg_208, "tmp_8_reg_208");
    sc_trace(mVcdFile, tmp_s_fu_198_p1, "tmp_s_fu_198_p1");
    sc_trace(mVcdFile, tmp_1_fu_78_p4, "tmp_1_fu_78_p4");
    sc_trace(mVcdFile, tmp_3_fu_100_p1, "tmp_3_fu_100_p1");
    sc_trace(mVcdFile, p_Result_2_fu_104_p3, "p_Result_2_fu_104_p3");
    sc_trace(mVcdFile, ret_V_cast_fu_88_p1, "ret_V_cast_fu_88_p1");
    sc_trace(mVcdFile, tmp_5_fu_112_p2, "tmp_5_fu_112_p2");
    sc_trace(mVcdFile, ret_V_fu_118_p2, "ret_V_fu_118_p2");
    sc_trace(mVcdFile, tmp_2_fu_92_p3, "tmp_2_fu_92_p3");
    sc_trace(mVcdFile, p_s_fu_124_p3, "p_s_fu_124_p3");
    sc_trace(mVcdFile, p_2_fu_132_p3, "p_2_fu_132_p3");
    sc_trace(mVcdFile, tmp_4_fu_140_p1, "tmp_4_fu_140_p1");
    sc_trace(mVcdFile, index_fu_144_p2, "index_fu_144_p2");
    sc_trace(mVcdFile, tmp_6_fu_156_p3, "tmp_6_fu_156_p3");
    sc_trace(mVcdFile, index_cast_fu_150_p2, "index_cast_fu_150_p2");
    sc_trace(mVcdFile, p_1_fu_164_p3, "p_1_fu_164_p3");
    sc_trace(mVcdFile, icmp_fu_186_p2, "icmp_fu_186_p2");
    sc_trace(mVcdFile, index_1_fu_191_p3, "index_1_fu_191_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_pipeline_idle_pp0, "ap_pipeline_idle_pp0");
#endif

    }
}

sigmoid::~sigmoid() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete sigmoid_table3_U;
}

void sigmoid::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_CS_fsm_pp0_stage0.read(), ap_const_lv1_1) && 
             !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_pp0_stage0.read(), ap_const_lv1_1) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)))) {
        tmp_7_reg_203 = tmp_7_fu_172_p1.read();
        tmp_8_reg_208 = p_1_fu_164_p3.read().range(13, 10);
    }
}

void sigmoid::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read().range(0, 0);
}

void sigmoid::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_CS_fsm_pp0_stage0.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sigmoid::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void sigmoid::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_pp0_stage0.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sigmoid::thread_ap_pipeline_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_pipeline_idle_pp0 = ap_const_logic_1;
    } else {
        ap_pipeline_idle_pp0 = ap_const_logic_0;
    }
}

void sigmoid::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_pp0_stage0.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sigmoid::thread_ap_return() {
    ap_return = sigmoid_table3_q0.read();
}

void sigmoid::thread_icmp_fu_186_p2() {
    icmp_fu_186_p2 = (!tmp_8_reg_208.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_8_reg_208.read() != ap_const_lv4_0);
}

void sigmoid::thread_index_1_fu_191_p3() {
    index_1_fu_191_p3 = (!icmp_fu_186_p2.read()[0].is_01())? sc_lv<10>(): ((icmp_fu_186_p2.read()[0].to_bool())? ap_const_lv10_3FF: tmp_7_reg_203.read());
}

void sigmoid::thread_index_cast_fu_150_p2() {
    index_cast_fu_150_p2 = (!ap_const_lv14_200.is_01() || !tmp_4_fu_140_p1.read().is_01())? sc_lv<14>(): (sc_biguint<14>(ap_const_lv14_200) + sc_biguint<14>(tmp_4_fu_140_p1.read()));
}

void sigmoid::thread_index_fu_144_p2() {
    index_fu_144_p2 = (!ap_const_lv15_200.is_01() || !p_2_fu_132_p3.read().is_01())? sc_lv<15>(): (sc_biguint<15>(ap_const_lv15_200) + sc_biguint<15>(p_2_fu_132_p3.read()));
}

void sigmoid::thread_p_1_fu_164_p3() {
    p_1_fu_164_p3 = (!tmp_6_fu_156_p3.read()[0].is_01())? sc_lv<14>(): ((tmp_6_fu_156_p3.read()[0].to_bool())? ap_const_lv14_0: index_cast_fu_150_p2.read());
}

void sigmoid::thread_p_2_fu_132_p3() {
    p_2_fu_132_p3 = (!tmp_2_fu_92_p3.read()[0].is_01())? sc_lv<15>(): ((tmp_2_fu_92_p3.read()[0].to_bool())? p_s_fu_124_p3.read(): ret_V_cast_fu_88_p1.read());
}

void sigmoid::thread_p_Result_2_fu_104_p3() {
    p_Result_2_fu_104_p3 = esl_concat<4,6>(tmp_3_fu_100_p1.read(), ap_const_lv6_0);
}

void sigmoid::thread_p_s_fu_124_p3() {
    p_s_fu_124_p3 = (!tmp_5_fu_112_p2.read()[0].is_01())? sc_lv<15>(): ((tmp_5_fu_112_p2.read()[0].to_bool())? ret_V_cast_fu_88_p1.read(): ret_V_fu_118_p2.read());
}

void sigmoid::thread_ret_V_cast_fu_88_p1() {
    ret_V_cast_fu_88_p1 = esl_sext<15,14>(tmp_1_fu_78_p4.read());
}

void sigmoid::thread_ret_V_fu_118_p2() {
    ret_V_fu_118_p2 = (!ap_const_lv15_1.is_01() || !ret_V_cast_fu_88_p1.read().is_01())? sc_lv<15>(): (sc_biguint<15>(ap_const_lv15_1) + sc_bigint<15>(ret_V_cast_fu_88_p1.read()));
}

void sigmoid::thread_sigmoid_table3_address0() {
    sigmoid_table3_address0 =  (sc_lv<10>) (tmp_s_fu_198_p1.read());
}

void sigmoid::thread_sigmoid_table3_ce0() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_pp0_stage0.read(), ap_const_lv1_1) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        sigmoid_table3_ce0 = ap_const_logic_1;
    } else {
        sigmoid_table3_ce0 = ap_const_logic_0;
    }
}

void sigmoid::thread_tmp_1_fu_78_p4() {
    tmp_1_fu_78_p4 = data_V_read.read().range(17, 4);
}

void sigmoid::thread_tmp_2_fu_92_p3() {
    tmp_2_fu_92_p3 = data_V_read.read().range(17, 17);
}

void sigmoid::thread_tmp_3_fu_100_p1() {
    tmp_3_fu_100_p1 = data_V_read.read().range(4-1, 0);
}

void sigmoid::thread_tmp_4_fu_140_p1() {
    tmp_4_fu_140_p1 = p_2_fu_132_p3.read().range(14-1, 0);
}

void sigmoid::thread_tmp_5_fu_112_p2() {
    tmp_5_fu_112_p2 = (!p_Result_2_fu_104_p3.read().is_01() || !ap_const_lv10_0.is_01())? sc_lv<1>(): sc_lv<1>(p_Result_2_fu_104_p3.read() == ap_const_lv10_0);
}

void sigmoid::thread_tmp_6_fu_156_p3() {
    tmp_6_fu_156_p3 = index_fu_144_p2.read().range(14, 14);
}

void sigmoid::thread_tmp_7_fu_172_p1() {
    tmp_7_fu_172_p1 = p_1_fu_164_p3.read().range(10-1, 0);
}

void sigmoid::thread_tmp_s_fu_198_p1() {
    tmp_s_fu_198_p1 = esl_zext<64,10>(index_1_fu_191_p3.read());
}

void sigmoid::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

