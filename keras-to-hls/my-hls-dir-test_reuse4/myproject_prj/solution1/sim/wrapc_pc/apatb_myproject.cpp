// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#define AP_INT_MAX_W 32678

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "data_0_V"
#define AUTOTB_TVIN_data_0_V  "../tv/cdatafile/c.myproject.autotvin_data_0_V.dat"
// wrapc file define: "data_1_V"
#define AUTOTB_TVIN_data_1_V  "../tv/cdatafile/c.myproject.autotvin_data_1_V.dat"
// wrapc file define: "data_2_V"
#define AUTOTB_TVIN_data_2_V  "../tv/cdatafile/c.myproject.autotvin_data_2_V.dat"
// wrapc file define: "data_3_V"
#define AUTOTB_TVIN_data_3_V  "../tv/cdatafile/c.myproject.autotvin_data_3_V.dat"
// wrapc file define: "data_4_V"
#define AUTOTB_TVIN_data_4_V  "../tv/cdatafile/c.myproject.autotvin_data_4_V.dat"
// wrapc file define: "data_5_V"
#define AUTOTB_TVIN_data_5_V  "../tv/cdatafile/c.myproject.autotvin_data_5_V.dat"
// wrapc file define: "data_6_V"
#define AUTOTB_TVIN_data_6_V  "../tv/cdatafile/c.myproject.autotvin_data_6_V.dat"
// wrapc file define: "data_7_V"
#define AUTOTB_TVIN_data_7_V  "../tv/cdatafile/c.myproject.autotvin_data_7_V.dat"
// wrapc file define: "data_8_V"
#define AUTOTB_TVIN_data_8_V  "../tv/cdatafile/c.myproject.autotvin_data_8_V.dat"
// wrapc file define: "data_9_V"
#define AUTOTB_TVIN_data_9_V  "../tv/cdatafile/c.myproject.autotvin_data_9_V.dat"
// wrapc file define: "res_0_V"
#define AUTOTB_TVOUT_res_0_V  "../tv/cdatafile/c.myproject.autotvout_res_0_V.dat"
// wrapc file define: "const_size_in"
#define AUTOTB_TVOUT_const_size_in  "../tv/cdatafile/c.myproject.autotvout_const_size_in.dat"
// wrapc file define: "const_size_out"
#define AUTOTB_TVOUT_const_size_out  "../tv/cdatafile/c.myproject.autotvout_const_size_out.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "res_0_V"
#define AUTOTB_TVOUT_PC_res_0_V  "../tv/rtldatafile/rtl.myproject.autotvout_res_0_V.dat"
// tvout file define: "const_size_in"
#define AUTOTB_TVOUT_PC_const_size_in  "../tv/rtldatafile/rtl.myproject.autotvout_const_size_in.dat"
// tvout file define: "const_size_out"
#define AUTOTB_TVOUT_PC_const_size_out  "../tv/rtldatafile/rtl.myproject.autotvout_const_size_out.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			data_0_V_depth = 0;
			data_1_V_depth = 0;
			data_2_V_depth = 0;
			data_3_V_depth = 0;
			data_4_V_depth = 0;
			data_5_V_depth = 0;
			data_6_V_depth = 0;
			data_7_V_depth = 0;
			data_8_V_depth = 0;
			data_9_V_depth = 0;
			res_0_V_depth = 0;
			const_size_in_depth = 0;
			const_size_out_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{data_0_V " << data_0_V_depth << "}\n";
			total_list << "{data_1_V " << data_1_V_depth << "}\n";
			total_list << "{data_2_V " << data_2_V_depth << "}\n";
			total_list << "{data_3_V " << data_3_V_depth << "}\n";
			total_list << "{data_4_V " << data_4_V_depth << "}\n";
			total_list << "{data_5_V " << data_5_V_depth << "}\n";
			total_list << "{data_6_V " << data_6_V_depth << "}\n";
			total_list << "{data_7_V " << data_7_V_depth << "}\n";
			total_list << "{data_8_V " << data_8_V_depth << "}\n";
			total_list << "{data_9_V " << data_9_V_depth << "}\n";
			total_list << "{res_0_V " << res_0_V_depth << "}\n";
			total_list << "{const_size_in " << const_size_in_depth << "}\n";
			total_list << "{const_size_out " << const_size_out_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int data_0_V_depth;
		int data_1_V_depth;
		int data_2_V_depth;
		int data_3_V_depth;
		int data_4_V_depth;
		int data_5_V_depth;
		int data_6_V_depth;
		int data_7_V_depth;
		int data_8_V_depth;
		int data_9_V_depth;
		int res_0_V_depth;
		int const_size_in_depth;
		int const_size_out_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};

extern void myproject (
ap_fixed<18, 8, (ap_q_mode) 5, (ap_o_mode)3, 0> data[10],
ap_fixed<18, 8, (ap_q_mode) 5, (ap_o_mode)3, 0> res[1],
unsigned short& const_size_in,
unsigned short& const_size_out);

void AESL_WRAP_myproject (
ap_fixed<18, 8, (ap_q_mode) 5, (ap_o_mode)3, 0> data[10],
ap_fixed<18, 8, (ap_q_mode) 5, (ap_o_mode)3, 0> res[1],
unsigned short& const_size_in,
unsigned short& const_size_out)
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "res_0_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_res_0_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_res_0_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_res_0_V, AESL_token); // data

			sc_bv<18> *res_0_V_pc_buffer = new sc_bv<18>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'res_0_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'res_0_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					res_0_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_res_0_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_res_0_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: res_0_V
				{
					// bitslice(17, 0)
					// {
						// celement: res.V(17, 0)
						// {
							sc_lv<18>* res_V_lv0_0_0_2 = new sc_lv<18>[1];
						// }
					// }

					// bitslice(17, 0)
					{
						int hls_map_index = 0;
						// celement: res.V(17, 0)
						{
							// carray: (0) => (0) @ (2)
							for (int i_0 = 0; i_0 <= 0; i_0 += 2)
							{
								if (&(res[0]) != NULL) // check the null address if the c port is array or others
								{
									res_V_lv0_0_0_2[hls_map_index++].range(17, 0) = sc_bv<18>(res_0_V_pc_buffer[hls_map_index].range(17, 0));
								}
							}
						}
					}

					// bitslice(17, 0)
					{
						int hls_map_index = 0;
						// celement: res.V(17, 0)
						{
							// carray: (0) => (0) @ (2)
							for (int i_0 = 0; i_0 <= 0; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : res[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : res[0]
								// output_left_conversion : (res[i_0]).range()
								// output_type_conversion : (res_V_lv0_0_0_2[hls_map_index++]).to_string(SC_BIN).c_str()
								if (&(res[0]) != NULL) // check the null address if the c port is array or others
								{
									(res[i_0]).range() = (res_V_lv0_0_0_2[hls_map_index++]).to_string(SC_BIN).c_str();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] res_0_V_pc_buffer;
		}

		// output port post check: "const_size_in"
		aesl_fh.read(AUTOTB_TVOUT_PC_const_size_in, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_const_size_in, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_const_size_in, AESL_token); // data

			sc_bv<16> *const_size_in_pc_buffer = new sc_bv<16>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'const_size_in', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'const_size_in', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					const_size_in_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_const_size_in, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_const_size_in))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: const_size_in
				{
					// bitslice(15, 0)
					// {
						// celement: const_size_in(15, 0)
						// {
							sc_lv<16>* const_size_in_lv0_0_0_1 = new sc_lv<16>[1];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: const_size_in(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(const_size_in) != NULL) // check the null address if the c port is array or others
								{
									const_size_in_lv0_0_0_1[hls_map_index++].range(15, 0) = sc_bv<16>(const_size_in_pc_buffer[hls_map_index].range(15, 0));
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: const_size_in(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : const_size_in
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : const_size_in
								// output_left_conversion : const_size_in
								// output_type_conversion : (const_size_in_lv0_0_0_1[hls_map_index++]).to_uint64()
								if (&(const_size_in) != NULL) // check the null address if the c port is array or others
								{
									const_size_in = (const_size_in_lv0_0_0_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] const_size_in_pc_buffer;
		}

		// output port post check: "const_size_out"
		aesl_fh.read(AUTOTB_TVOUT_PC_const_size_out, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_const_size_out, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_const_size_out, AESL_token); // data

			sc_bv<16> *const_size_out_pc_buffer = new sc_bv<16>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'const_size_out', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'const_size_out', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					const_size_out_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_const_size_out, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_const_size_out))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: const_size_out
				{
					// bitslice(15, 0)
					// {
						// celement: const_size_out(15, 0)
						// {
							sc_lv<16>* const_size_out_lv0_0_0_1 = new sc_lv<16>[1];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: const_size_out(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(const_size_out) != NULL) // check the null address if the c port is array or others
								{
									const_size_out_lv0_0_0_1[hls_map_index++].range(15, 0) = sc_bv<16>(const_size_out_pc_buffer[hls_map_index].range(15, 0));
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: const_size_out(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : const_size_out
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : const_size_out
								// output_left_conversion : const_size_out
								// output_type_conversion : (const_size_out_lv0_0_0_1[hls_map_index++]).to_uint64()
								if (&(const_size_out) != NULL) // check the null address if the c port is array or others
								{
									const_size_out = (const_size_out_lv0_0_0_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] const_size_out_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "data_0_V"
		char* tvin_data_0_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_data_0_V);

		// "data_1_V"
		char* tvin_data_1_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_data_1_V);

		// "data_2_V"
		char* tvin_data_2_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_data_2_V);

		// "data_3_V"
		char* tvin_data_3_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_data_3_V);

		// "data_4_V"
		char* tvin_data_4_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_data_4_V);

		// "data_5_V"
		char* tvin_data_5_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_data_5_V);

		// "data_6_V"
		char* tvin_data_6_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_data_6_V);

		// "data_7_V"
		char* tvin_data_7_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_data_7_V);

		// "data_8_V"
		char* tvin_data_8_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_data_8_V);

		// "data_9_V"
		char* tvin_data_9_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_data_9_V);

		// "res_0_V"
		char* tvout_res_0_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_res_0_V);

		// "const_size_in"
		char* tvout_const_size_in = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_const_size_in);

		// "const_size_out"
		char* tvout_const_size_out = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_const_size_out);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_data_0_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_data_0_V, tvin_data_0_V);

		sc_bv<18>* data_0_V_tvin_wrapc_buffer = new sc_bv<18>[1];

		// RTL Name: data_0_V
		{
			// bitslice(17, 0)
			{
				int hls_map_index = 0;
				// celement: data.V(17, 0)
				{
					// carray: (0) => (0) @ (2)
					for (int i_0 = 0; i_0 <= 0; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : data[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : data[0]
						// regulate_c_name       : data_V
						// input_type_conversion : (data[i_0]).range().to_string(SC_BIN).c_str()
						if (&(data[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<18> data_V_tmp_mem;
							data_V_tmp_mem = (data[i_0]).range().to_string(SC_BIN).c_str();
							data_0_V_tvin_wrapc_buffer[hls_map_index++].range(17, 0) = data_V_tmp_mem.range(17, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_data_0_V, "%s\n", (data_0_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_data_0_V, tvin_data_0_V);
		}

		tcl_file.set_num(1, &tcl_file.data_0_V_depth);
		sprintf(tvin_data_0_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_data_0_V, tvin_data_0_V);

		// release memory allocation
		delete [] data_0_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_data_1_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_data_1_V, tvin_data_1_V);

		sc_bv<18>* data_1_V_tvin_wrapc_buffer = new sc_bv<18>[1];

		// RTL Name: data_1_V
		{
			// bitslice(17, 0)
			{
				int hls_map_index = 0;
				// celement: data.V(17, 0)
				{
					// carray: (1) => (1) @ (2)
					for (int i_0 = 1; i_0 <= 1; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : data[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : data[0]
						// regulate_c_name       : data_V
						// input_type_conversion : (data[i_0]).range().to_string(SC_BIN).c_str()
						if (&(data[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<18> data_V_tmp_mem;
							data_V_tmp_mem = (data[i_0]).range().to_string(SC_BIN).c_str();
							data_1_V_tvin_wrapc_buffer[hls_map_index++].range(17, 0) = data_V_tmp_mem.range(17, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_data_1_V, "%s\n", (data_1_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_data_1_V, tvin_data_1_V);
		}

		tcl_file.set_num(1, &tcl_file.data_1_V_depth);
		sprintf(tvin_data_1_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_data_1_V, tvin_data_1_V);

		// release memory allocation
		delete [] data_1_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_data_2_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_data_2_V, tvin_data_2_V);

		sc_bv<18>* data_2_V_tvin_wrapc_buffer = new sc_bv<18>[1];

		// RTL Name: data_2_V
		{
			// bitslice(17, 0)
			{
				int hls_map_index = 0;
				// celement: data.V(17, 0)
				{
					// carray: (2) => (2) @ (2)
					for (int i_0 = 2; i_0 <= 2; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : data[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : data[0]
						// regulate_c_name       : data_V
						// input_type_conversion : (data[i_0]).range().to_string(SC_BIN).c_str()
						if (&(data[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<18> data_V_tmp_mem;
							data_V_tmp_mem = (data[i_0]).range().to_string(SC_BIN).c_str();
							data_2_V_tvin_wrapc_buffer[hls_map_index++].range(17, 0) = data_V_tmp_mem.range(17, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_data_2_V, "%s\n", (data_2_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_data_2_V, tvin_data_2_V);
		}

		tcl_file.set_num(1, &tcl_file.data_2_V_depth);
		sprintf(tvin_data_2_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_data_2_V, tvin_data_2_V);

		// release memory allocation
		delete [] data_2_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_data_3_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_data_3_V, tvin_data_3_V);

		sc_bv<18>* data_3_V_tvin_wrapc_buffer = new sc_bv<18>[1];

		// RTL Name: data_3_V
		{
			// bitslice(17, 0)
			{
				int hls_map_index = 0;
				// celement: data.V(17, 0)
				{
					// carray: (3) => (3) @ (2)
					for (int i_0 = 3; i_0 <= 3; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : data[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : data[0]
						// regulate_c_name       : data_V
						// input_type_conversion : (data[i_0]).range().to_string(SC_BIN).c_str()
						if (&(data[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<18> data_V_tmp_mem;
							data_V_tmp_mem = (data[i_0]).range().to_string(SC_BIN).c_str();
							data_3_V_tvin_wrapc_buffer[hls_map_index++].range(17, 0) = data_V_tmp_mem.range(17, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_data_3_V, "%s\n", (data_3_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_data_3_V, tvin_data_3_V);
		}

		tcl_file.set_num(1, &tcl_file.data_3_V_depth);
		sprintf(tvin_data_3_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_data_3_V, tvin_data_3_V);

		// release memory allocation
		delete [] data_3_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_data_4_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_data_4_V, tvin_data_4_V);

		sc_bv<18>* data_4_V_tvin_wrapc_buffer = new sc_bv<18>[1];

		// RTL Name: data_4_V
		{
			// bitslice(17, 0)
			{
				int hls_map_index = 0;
				// celement: data.V(17, 0)
				{
					// carray: (4) => (4) @ (2)
					for (int i_0 = 4; i_0 <= 4; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : data[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : data[0]
						// regulate_c_name       : data_V
						// input_type_conversion : (data[i_0]).range().to_string(SC_BIN).c_str()
						if (&(data[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<18> data_V_tmp_mem;
							data_V_tmp_mem = (data[i_0]).range().to_string(SC_BIN).c_str();
							data_4_V_tvin_wrapc_buffer[hls_map_index++].range(17, 0) = data_V_tmp_mem.range(17, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_data_4_V, "%s\n", (data_4_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_data_4_V, tvin_data_4_V);
		}

		tcl_file.set_num(1, &tcl_file.data_4_V_depth);
		sprintf(tvin_data_4_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_data_4_V, tvin_data_4_V);

		// release memory allocation
		delete [] data_4_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_data_5_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_data_5_V, tvin_data_5_V);

		sc_bv<18>* data_5_V_tvin_wrapc_buffer = new sc_bv<18>[1];

		// RTL Name: data_5_V
		{
			// bitslice(17, 0)
			{
				int hls_map_index = 0;
				// celement: data.V(17, 0)
				{
					// carray: (5) => (5) @ (2)
					for (int i_0 = 5; i_0 <= 5; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : data[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : data[0]
						// regulate_c_name       : data_V
						// input_type_conversion : (data[i_0]).range().to_string(SC_BIN).c_str()
						if (&(data[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<18> data_V_tmp_mem;
							data_V_tmp_mem = (data[i_0]).range().to_string(SC_BIN).c_str();
							data_5_V_tvin_wrapc_buffer[hls_map_index++].range(17, 0) = data_V_tmp_mem.range(17, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_data_5_V, "%s\n", (data_5_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_data_5_V, tvin_data_5_V);
		}

		tcl_file.set_num(1, &tcl_file.data_5_V_depth);
		sprintf(tvin_data_5_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_data_5_V, tvin_data_5_V);

		// release memory allocation
		delete [] data_5_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_data_6_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_data_6_V, tvin_data_6_V);

		sc_bv<18>* data_6_V_tvin_wrapc_buffer = new sc_bv<18>[1];

		// RTL Name: data_6_V
		{
			// bitslice(17, 0)
			{
				int hls_map_index = 0;
				// celement: data.V(17, 0)
				{
					// carray: (6) => (6) @ (2)
					for (int i_0 = 6; i_0 <= 6; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : data[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : data[0]
						// regulate_c_name       : data_V
						// input_type_conversion : (data[i_0]).range().to_string(SC_BIN).c_str()
						if (&(data[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<18> data_V_tmp_mem;
							data_V_tmp_mem = (data[i_0]).range().to_string(SC_BIN).c_str();
							data_6_V_tvin_wrapc_buffer[hls_map_index++].range(17, 0) = data_V_tmp_mem.range(17, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_data_6_V, "%s\n", (data_6_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_data_6_V, tvin_data_6_V);
		}

		tcl_file.set_num(1, &tcl_file.data_6_V_depth);
		sprintf(tvin_data_6_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_data_6_V, tvin_data_6_V);

		// release memory allocation
		delete [] data_6_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_data_7_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_data_7_V, tvin_data_7_V);

		sc_bv<18>* data_7_V_tvin_wrapc_buffer = new sc_bv<18>[1];

		// RTL Name: data_7_V
		{
			// bitslice(17, 0)
			{
				int hls_map_index = 0;
				// celement: data.V(17, 0)
				{
					// carray: (7) => (7) @ (2)
					for (int i_0 = 7; i_0 <= 7; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : data[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : data[0]
						// regulate_c_name       : data_V
						// input_type_conversion : (data[i_0]).range().to_string(SC_BIN).c_str()
						if (&(data[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<18> data_V_tmp_mem;
							data_V_tmp_mem = (data[i_0]).range().to_string(SC_BIN).c_str();
							data_7_V_tvin_wrapc_buffer[hls_map_index++].range(17, 0) = data_V_tmp_mem.range(17, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_data_7_V, "%s\n", (data_7_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_data_7_V, tvin_data_7_V);
		}

		tcl_file.set_num(1, &tcl_file.data_7_V_depth);
		sprintf(tvin_data_7_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_data_7_V, tvin_data_7_V);

		// release memory allocation
		delete [] data_7_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_data_8_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_data_8_V, tvin_data_8_V);

		sc_bv<18>* data_8_V_tvin_wrapc_buffer = new sc_bv<18>[1];

		// RTL Name: data_8_V
		{
			// bitslice(17, 0)
			{
				int hls_map_index = 0;
				// celement: data.V(17, 0)
				{
					// carray: (8) => (8) @ (2)
					for (int i_0 = 8; i_0 <= 8; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : data[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : data[0]
						// regulate_c_name       : data_V
						// input_type_conversion : (data[i_0]).range().to_string(SC_BIN).c_str()
						if (&(data[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<18> data_V_tmp_mem;
							data_V_tmp_mem = (data[i_0]).range().to_string(SC_BIN).c_str();
							data_8_V_tvin_wrapc_buffer[hls_map_index++].range(17, 0) = data_V_tmp_mem.range(17, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_data_8_V, "%s\n", (data_8_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_data_8_V, tvin_data_8_V);
		}

		tcl_file.set_num(1, &tcl_file.data_8_V_depth);
		sprintf(tvin_data_8_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_data_8_V, tvin_data_8_V);

		// release memory allocation
		delete [] data_8_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_data_9_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_data_9_V, tvin_data_9_V);

		sc_bv<18>* data_9_V_tvin_wrapc_buffer = new sc_bv<18>[1];

		// RTL Name: data_9_V
		{
			// bitslice(17, 0)
			{
				int hls_map_index = 0;
				// celement: data.V(17, 0)
				{
					// carray: (9) => (9) @ (2)
					for (int i_0 = 9; i_0 <= 9; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : data[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : data[0]
						// regulate_c_name       : data_V
						// input_type_conversion : (data[i_0]).range().to_string(SC_BIN).c_str()
						if (&(data[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<18> data_V_tmp_mem;
							data_V_tmp_mem = (data[i_0]).range().to_string(SC_BIN).c_str();
							data_9_V_tvin_wrapc_buffer[hls_map_index++].range(17, 0) = data_V_tmp_mem.range(17, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_data_9_V, "%s\n", (data_9_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_data_9_V, tvin_data_9_V);
		}

		tcl_file.set_num(1, &tcl_file.data_9_V_depth);
		sprintf(tvin_data_9_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_data_9_V, tvin_data_9_V);

		// release memory allocation
		delete [] data_9_V_tvin_wrapc_buffer;

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		myproject(data, res, const_size_in, const_size_out);

		CodeState = DUMP_OUTPUTS;

		// [[transaction]]
		sprintf(tvout_res_0_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_res_0_V, tvout_res_0_V);

		sc_bv<18>* res_0_V_tvout_wrapc_buffer = new sc_bv<18>[1];

		// RTL Name: res_0_V
		{
			// bitslice(17, 0)
			{
				int hls_map_index = 0;
				// celement: res.V(17, 0)
				{
					// carray: (0) => (0) @ (2)
					for (int i_0 = 0; i_0 <= 0; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : res[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : res[0]
						// regulate_c_name       : res_V
						// input_type_conversion : (res[i_0]).range().to_string(SC_BIN).c_str()
						if (&(res[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<18> res_V_tmp_mem;
							res_V_tmp_mem = (res[i_0]).range().to_string(SC_BIN).c_str();
							res_0_V_tvout_wrapc_buffer[hls_map_index++].range(17, 0) = res_V_tmp_mem.range(17, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_res_0_V, "%s\n", (res_0_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_res_0_V, tvout_res_0_V);
		}

		tcl_file.set_num(1, &tcl_file.res_0_V_depth);
		sprintf(tvout_res_0_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_res_0_V, tvout_res_0_V);

		// release memory allocation
		delete [] res_0_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_const_size_in, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_const_size_in, tvout_const_size_in);

		sc_bv<16>* const_size_in_tvout_wrapc_buffer = new sc_bv<16>[1];

		// RTL Name: const_size_in
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: const_size_in(15, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : const_size_in
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : const_size_in
						// regulate_c_name       : const_size_in
						// input_type_conversion : const_size_in
						if (&(const_size_in) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> const_size_in_tmp_mem;
							const_size_in_tmp_mem = const_size_in;
							const_size_in_tvout_wrapc_buffer[hls_map_index++].range(15, 0) = const_size_in_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_const_size_in, "%s\n", (const_size_in_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_const_size_in, tvout_const_size_in);
		}

		tcl_file.set_num(1, &tcl_file.const_size_in_depth);
		sprintf(tvout_const_size_in, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_const_size_in, tvout_const_size_in);

		// release memory allocation
		delete [] const_size_in_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_const_size_out, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_const_size_out, tvout_const_size_out);

		sc_bv<16>* const_size_out_tvout_wrapc_buffer = new sc_bv<16>[1];

		// RTL Name: const_size_out
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: const_size_out(15, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : const_size_out
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : const_size_out
						// regulate_c_name       : const_size_out
						// input_type_conversion : const_size_out
						if (&(const_size_out) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> const_size_out_tmp_mem;
							const_size_out_tmp_mem = const_size_out;
							const_size_out_tvout_wrapc_buffer[hls_map_index++].range(15, 0) = const_size_out_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_const_size_out, "%s\n", (const_size_out_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_const_size_out, tvout_const_size_out);
		}

		tcl_file.set_num(1, &tcl_file.const_size_out_depth);
		sprintf(tvout_const_size_out, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_const_size_out, tvout_const_size_out);

		// release memory allocation
		delete [] const_size_out_tvout_wrapc_buffer;

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "data_0_V"
		delete [] tvin_data_0_V;
		// release memory allocation: "data_1_V"
		delete [] tvin_data_1_V;
		// release memory allocation: "data_2_V"
		delete [] tvin_data_2_V;
		// release memory allocation: "data_3_V"
		delete [] tvin_data_3_V;
		// release memory allocation: "data_4_V"
		delete [] tvin_data_4_V;
		// release memory allocation: "data_5_V"
		delete [] tvin_data_5_V;
		// release memory allocation: "data_6_V"
		delete [] tvin_data_6_V;
		// release memory allocation: "data_7_V"
		delete [] tvin_data_7_V;
		// release memory allocation: "data_8_V"
		delete [] tvin_data_8_V;
		// release memory allocation: "data_9_V"
		delete [] tvin_data_9_V;
		// release memory allocation: "res_0_V"
		delete [] tvout_res_0_V;
		// release memory allocation: "const_size_in"
		delete [] tvout_const_size_in;
		// release memory allocation: "const_size_out"
		delete [] tvout_const_size_out;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

